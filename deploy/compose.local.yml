# Local deployment for the MLOps stack
#
# - Minio for block storage
# - MLflow for experiment tracking / model registry
# - MLServer-based inference server, model fetched from MLflow
# - Prometheus & Grafana for monitoring

services:
  lakefs:
    image: treeverse/lakefs
    depends_on:
      - minio-create-bucket-lakefs
    ports:
      - "8000:8000"
    networks:
      - web
    environment:
      - LAKEFS_DATABASE_TYPE=local
      - LAKEFS_BLOCKSTORE_TYPE=s3
      - LAKEFS_BLOCKSTORE_DEFAULT_NAMESPACE_PREFIX=s3://lakefs/
      - LAKEFS_BLOCKSTORE_S3_FORCE_PATH_STYLE=true
      - LAKEFS_BLOCKSTORE_S3_ENDPOINT=http://minio:9000
      - LAKEFS_BLOCKSTORE_S3_CREDENTIALS_ACCESS_KEY_ID=minio_user
      - LAKEFS_BLOCKSTORE_S3_CREDENTIALS_SECRET_ACCESS_KEY=minio_password
      - LAKEFS_AUTH_ENCRYPT_SECRET_KEY=hello
      - LAKEFS_LOGGING_LEVEL=INFO
      - LAKEFS_INSTALLATION_USER_NAME=aai
      - LAKEFS_INSTALLATION_ACCESS_KEY_ID=AKIAIOSFOLKFSSAMPLES
      - LAKEFS_INSTALLATION_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
      - LAKECTL_SERVER_ENDPOINT_URL=http://localhost:8000
    command: [ 'run', '--local-settings' ]
  minio:
    image: minio/minio
    expose:
      - "9000"
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - web
    environment:
      MINIO_ROOT_USER: "minio_user"
      MINIO_ROOT_PASSWORD: "minio_password"
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 2s
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"

  minio-create-bucket-mlflow:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - web
    entrypoint: >
      bash -c "
      mc alias set minio http://minio:9000 minio_user minio_password &&
      mc mb --ignore-existing minio/mlflow
      "
  minio-create-bucket-lakefs:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - web
    # minio/ prefix in bucket name is the alias (must be given!)
    entrypoint: >
      bash -c "
      mc alias set minio http://minio:9000 minio_user minio_password &&
      mc mb minio/lakefs --ignore-existing
      "
  mlflow:
    build:
      context: mlflow
      dockerfile: Dockerfile
    develop:
      watch:
        - path: mlflow
          action: rebuild
    ports:
      - "50000:5000"
    healthcheck:
      test: python -c "import urllib.request; urllib.request.urlopen('http://localhost:5000/version').read()"
      interval: 2s
    networks:
      - monitoring
      - web
    depends_on:
      minio:
        condition: service_healthy
      minio-create-bucket-mlflow:
        condition: service_completed_successfully
    volumes:
      - mlflow_artifacts:/mlartifacts
      - mlflow_db:/mlruns
      - mlflow_metrics:/metrics
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: minio_user
      AWS_SECRET_ACCESS_KEY: minio_password
    labels:
      prometheus.job: "mlflow"
    command:
      - "mlflow"
      - "server"
      - "--host"
      - "0.0.0.0"
      - "--backend-store-uri"
      - "sqlite:///mlruns/mlflow.db"
      - "--artifacts-destination"
      - "s3://mlflow"
      - "--serve-artifacts"
      - "--expose-prometheus"
      - "/metrics"

volumes:
  minio_data:
  mlflow_artifacts:
  mlflow_db:
  mlflow_metrics:

networks:
  monitoring:
    internal: true
  web:
